
*******************************
********** Parsed file ********
*******************************
val f : int -> int -> int[@@gospel
                            r = f x y
    requires x > 0
    requires y + 2 < 0
    requires x + 1 < 0
    ensures r = x + y
    ensures r > 2
    ensures r = 3 ]
exception X 
exception Y of int 
val f : int -> int -> int[@@gospel
                            r = f x y
    raises X -> x = 2
    raises Y i -> i = y + 2 -3 / x
    requires x > 0
    requires y + 2 < 0
    requires x + 1 < 0
    ensures r = x + y
    ensures r > 2
    ensures r = 3 ]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val f : int -> int -> int
(*@ r = f x y
    requires ...
    requires ...
    requires ...
    ensures ...
    ensures ...
    ensures ...
     *)

exception X 

exception Y of int 

val f : int -> int -> int
(*@ r = f x y
    requires ...
    requires ...
    requires ...
    ensures ...
    ensures ...
    ensures ...
    with ...
    with ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module complex_vals.mli

  Namespace: complex_vals.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      X
      Y
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val f : int -> int -> int
    (*@ r:int = f x:int y:int
        requires (((integer_of_int 
                 x:int):integer + 1:integer):integer < 0:integer):prop
                 requires (((integer_of_int 
                          y:int):integer + 2:integer):integer < 0:integer):prop
                 requires ((integer_of_int  x:int):integer > 0:integer):prop
        ensures ((integer_of_int  r:int):integer = ((integer_of_int 
                x:int):integer + (integer_of_int 
                y:int):integer):integer):prop
                ensures ((integer_of_int  r:int):integer > 2:integer):prop
                ensures ((integer_of_int  r:int):integer = 3:integer):prop*)
    
    exception X
    
    exception Y
    
    val f_1 : int -> int -> int
    (*@ r_1:int = f_1 x_1:int y_1:int
        requires (((integer_of_int 
                 x_1:int):integer + 1:integer):integer < 0:integer):prop
                 requires (((integer_of_int 
                          y_1:int):integer + 2:integer):integer < 0:integer):prop
                 requires ((integer_of_int 
                          x_1:int):integer > 0:integer):prop
        ensures ((integer_of_int  r_1:int):integer = ((integer_of_int 
                x_1:int):integer + (integer_of_int 
                y_1:int):integer):integer):prop
                ensures ((integer_of_int  r_1:int):integer > 2:integer):prop
                ensures ((integer_of_int  r_1:int):integer = 3:integer):prop
        raisesX  -> ((integer_of_int  x_1:int):integer = 2:integer):prop
        raisesY i:int -> ((integer_of_int 
              i:int):integer = (((integer_of_int 
              y_1:int):integer + 2:integer):integer - (3:integer / (integer_of_int 
              x_1:int):integer):integer):integer):prop*)


*** OK ***

