
*******************************
********** Parsed file ********
*******************************
val f : int -> int -> int[@@gospel  r = f y x ]
val f : y:int -> int -> int[@@gospel  r = f ~y x ]
val f : ?y:int -> int -> int[@@gospel  r = f ?y x ]
val f : y:int -> ?x:int -> int[@@gospel  r = f ~y ?x ]
val f : ?y:int -> x:int -> int[@@gospel  r = f ?y ~x ]
val f : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c[@@gospel  r = f x y z ]
val f : x:('a -> 'b -> 'c) -> 'a -> 'b -> 'c[@@gospel  r = f ~x y z ]
val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c[@@gospel  r = f ~x ~y z ]
val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c[@@gospel
                                                 r = f ~x [w:int] ~y z ]
val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c[@@gospel
                                                 r = f ~x [w:int] ~y [p:integer] z ]
val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c[@@gospel
                                                 r,[a:'a] = f ~x [w:int] ~y [p:integer] z ]
val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c[@@gospel
                                                 [b:integer],r,[a:'a] = f ~x [w:int] ~y [p:integer] z ]
val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c[@@gospel
                                                 [b:integer],r,[a:'a] = f ~x [w:int] ~y [p:integer] z ]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val f : int -> int -> int
(*@ r = f y x
     *)

val f : y:int -> int -> int
(*@ r = f ~y x
     *)

val f : ?y:int -> int -> int
(*@ r = f ?y x
     *)

val f : y:int -> ?x:int -> int
(*@ r = f ~y ?x
     *)

val f : ?y:int -> x:int -> int
(*@ r = f ?y ~x
     *)

val f : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
(*@ r = f x y z
     *)

val f : x:('a -> 'b -> 'c) -> 'a -> 'b -> 'c
(*@ r = f ~x y z
     *)

val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
(*@ r = f ~x ~y z
     *)

val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
(*@ r = f ~x [w : TY] ~y z
     *)

val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
(*@ r = f ~x [w : TY] ~y [p : TY] z
     *)

val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
(*@ r, [a : TY] = f ~x [w : TY] ~y [p : TY] z
     *)

val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
(*@ [b : TY], r, [a : TY] = f ~x [w : TY] ~y [p : TY] z
     *)

val f : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
(*@ [b : TY], r, [a : TY] = f ~x [w : TY] ~y [p : TY] z
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module vals.mli

  Namespace: vals.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val f : int -> int -> int
    (*@ r:int = f y:int x:int*)
    
    val f_1 : y:int -> int -> int
    (*@ r_1:int = f_1 ~y_1:int x_1:int*)
    
    val f_2 : ?y:int -> int -> int
    (*@ r_2:int = f_2 ?y_2:int option x_2:int*)
    
    val f_3 : y:int -> ?x:int -> int
    (*@ r_3:int = f_3 ~y_3:int ?x_3:int option*)
    
    val f_4 : ?y:int -> x:int -> int
    (*@ r_4:int = f_4 ?y_4:int option ~x_4:int*)
    
    val f_5 : ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
    (*@ r_5:'c = f_5 x_5:'a -> 'b -> 'c y_5:'a z:'b*)
    
    val f_6 : x:('a -> 'b -> 'c) -> 'a -> 'b -> 'c
    (*@ r_6:'c = f_6 ~x_6:'a -> 'b -> 'c y_6:'a z_1:'b*)
    
    val f_7 : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
    (*@ r_7:'c = f_7 ~x_7:'a -> 'b -> 'c ~y_7:'a z_2:'b*)
    
    val f_8 : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
    (*@ r_8:'c = f_8 ~x_8:'a -> 'b -> 'c [w:int: int] ~y_8:'a z_3:'b*)
    
    val f_9 : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
    (*@ r_9:'c = f_9
        ~x_9:'a -> 'b -> 'c [w_1:int: int] ~y_9:'a [p:integer: integer]
        z_4:'b*)
    
    val f_10 : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
    (*@ r_10:'c, [a_1:'a: 'a] = f_10
        ~x_10:'a -> 'b -> 'c [w_2:int: int] ~y_10:'a [p_1:integer: integer]
        z_5:'b*)
    
    val f_11 : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
    (*@ [b_1:integer: integer], r_11:'c, [a_2:'a: 'a] = f_11
        ~x_11:'a -> 'b -> 'c [w_3:int: int] ~y_11:'a [p_2:integer: integer]
        z_6:'b*)
    
    val f_12 : x:('a -> 'b -> 'c) -> y:'a -> 'b -> 'c
    (*@ [b_2:integer: integer], r_12:'c, [a_3:'a: 'a] = f_12
        ~x_12:'a -> 'b -> 'c [w_4:int: int] ~y_12:'a [p_3:integer: integer]
        z_7:'b*)


*** OK ***

