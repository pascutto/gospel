
*******************************
********** Parsed file ********
*******************************
[@@@gospel  type t3 = A2.t2 ]
[@@@gospel  type t4 = A1.t ]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

(*@ type t3 = A2.t2
   *)

(*@ type t4 = A1.t
   *)

*******************************
********* Typed GOSPEL ********
*******************************
module a3.mli

  Namespace: a3.mli
    Type symbols
       t3 [=t]
       t4 [=t]
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: A1
        Type symbols
           t
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          Namespace: Gospelstdlib
            Type symbols
              ('a) array
               int
              ('a) ref
              ('a) seq
              
            Logic Symbols
              function abs (_:integer) : integer
              function array_length (_:'a array) : integer
              function contents (_:'a array) : 'a seq
              function elts (_:'a array) : 'a seq
              function empty  : 'a seq
              function fst (_:'a * 'b) : 'a
              function infix * (_:integer) (_:integer) : integer
              function infix + (_:integer) (_:integer) : integer
              function infix ++ (_:'a seq) (_:'a seq) : 'a seq
              function infix - (_:integer) (_:integer) : integer
              function infix / (_:integer) (_:integer) : integer
              predicate infix < (_:integer) (_:integer)
              predicate infix <= (_:integer) (_:integer)
              predicate infix == (_:'a seq) (_:'a seq)
              predicate infix > (_:integer) (_:integer)
              predicate infix >= (_:integer) (_:integer)
              function integer_of_int (_:int) : integer
              function length (_:'a seq) : integer
              function max (_:integer) (_:integer) : integer
              function max_int  : integer
              function min (_:integer) (_:integer) : integer
              function min_int  : integer
              function mixfix [.._] (_:'a seq) (_:integer) : 'a seq
              function mixfix [_..] (_:'a seq) (_:integer) : 'a seq
              function mixfix [_.._] (_:'a seq) (_:integer) (_:integer) : 'a 
              seq
              function mixfix [_] (_:'a seq) (_:integer) : 'a
              function mod (_:integer) (_:integer) : integer
              function pred (_:integer) : integer
              function prefix ! (_:'a ref) : 'a
              function prefix - (_:integer) : integer
              function seq_of_list (_:'a list) : 'a seq
              function snd (_:'a * 'b) : 'b
              function succ (_:integer) : integer
              
            Exception Symbols
              Invalid_argument
              Not_found
              
            Namespaces
              Namespace: Array
                Type symbols
                  
                Logic Symbols
                  function length_1 (_:'a array) : integer
                  function mixfix [_]_1 (_:'a array) (_:integer) : 'a
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: ArrayPermut
                Type symbols
                  
                Logic Symbols
                  predicate permut_all (_:'a array) (_:'a array)
                  predicate permut_sub (_:'a array) (_:'a array) (_:integer)
                                       (_:integer)
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: Bag
                Type symbols
                  ('a) bag
                  
                Logic Symbols
                  function add (_:'a) (_:'a bag) : 'a bag
                  function card (_:'a bag) : integer
                  function choose (_:'a bag) : 'a
                  function diff (_:'a bag) (_:'a bag) : 'a bag
                  function empty_bag  : 'a bag
                  predicate eq_bag (_:'a bag) (_:'a bag)
                  predicate mem (_:'a) (_:'a bag)
                  function nb_occ (_:'a) (_:'a bag) : integer
                  function singleton (_:'a) : 'a bag
                  function union (_:'a bag) (_:'a bag) : 'a bag
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: Map
                Type symbols
                  
                Logic Symbols
                  function mixfix [<-] (_:'a -> 'b) (_:'a) (_:'b) : 'a -> 'b
                  function mixfix [_]_2 (_:'a -> 'b) (_:'a) : 'b
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: Order
                Type symbols
                  
                Logic Symbols
                  predicate is_pre_order (_:'a -> 'a -> int)
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: Peano
                Type symbols
                   t_1
                  
                Logic Symbols
                  function int_of_peano (_:t_1) : integer
                  function v (_:t_1) : integer
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: Seq
                Type symbols
                  
                Logic Symbols
                  function cons (_:'a) (_:'a seq) : 'a seq
                  function create (_:integer) (_:integer -> 'a) : 'a seq
                  predicate distinct (_:'a seq)
                  function fold_left (_:'a -> 'b -> 'a) (_:'a) (_:'b seq) : 'a
                  function fold_right (_:'a -> 'b -> 'b) (_:'a seq) (_:'b) : 'b
                  function get (_:'a seq) (_:integer) : 'a
                  function hd (_:'a seq) : 'a
                  function len (_:'a seq) : integer
                  function map (_:'a -> 'b) (_:'a seq) : 'b seq
                  predicate mem_1 (_:'a seq) (_:'a)
                  function mixfix [<-]_1 (_:'a seq) (_:integer) (_:'a) : 'a 
                  seq
                  function rev (_:'a seq) : 'a seq
                  function snoc (_:'a seq) (_:'a) : 'a seq
                  predicate sorted (_:int seq)
                  predicate sorted_sub (_:int seq) (_:integer) (_:integer)
                  function tl (_:'a seq) : 'a seq
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: SeqPerm
                Type symbols
                  
                Logic Symbols
                  function occ (_:'a seq) (_:'a) (_:integer) (_:integer) : 
                  integer
                  predicate permut (_:'a seq) (_:'a seq) (_:integer)
                                   (_:integer)
                  predicate permut_all_1 (_:'a seq) (_:'a seq)
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: Set
                Type symbols
                  ('a) set
                  
                Logic Symbols
                  predicate mem_2 (_:'a) (_:'a set)
                  function mixfix {:_:} (_:'a) : 'a set
                  function mixfix {}  : 'a set
                  function sum (_:'a -> integer) (_:'a set) : integer
                  function union_1 (_:'a set) (_:'a set) : 'a set
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: Sys
                Type symbols
                  
                Logic Symbols
                  function big_endian  : bool
                  function int_size  : integer
                  function max_array_length  : integer
                  function max_string_length  : integer
                  function word_size  : integer
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              
            Type Namespaces
              
          
        Type Namespaces
          
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    (*@ use A2 *)
    
    (*@ type t3 = t
              *)
    
    (*@ use A1 *)
    
    (*@ type t4 = t
              *)


*** OK ***

