
*******************************
********** Parsed file ********
*******************************
type t1
type 'a t2 = t1[@@gospel  function f (x: t1): 'a t2 = x ]
type 'c t3 = 'c t2[@@gospel  function f (x: int t3) : 'a t2 = x ]
type ('a, 'b) t4
type 'a t5 = ('a, 'a) t4[@@gospel  function f (x: 'a t5): ('a,'a) t4 = x ]
[@@gospel  function f (x: ('a,'a) t4): 'a t5 = x ]
type 'a t6 = {
  x: int ;
  y: 'a }
type ('a, 'b) t7 = 'a t6[@@gospel
                           function f (x: 'a t6) : ('a,'b) t7 =
  match x with
  | {x;y} -> {x;y}
]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

type t1
  

type 'a t2 = t1
  

(*@ function f ... *)

type 'c t3 = 'c t2
  

(*@ function f ... *)

type ('a, 'b) t4
  

type 'a t5 = ('a, 'a) t4
  

(*@ function f ... *)

(*@ function f ... *)

type 'a t6 = {
x: int ;
y: 'a }
  

type ('a, 'b) t7 = 'a t6
  

(*@ function f ... *)

*******************************
********* Typed GOSPEL ********
*******************************
module more_types.mli

  Namespace: more_types.mli
    Type symbols
       t1
      ('a) t2 [=t1]
      ('c) t3 [=t1]
      ('a, 'b) t4
      ('a) t5 [=('a, 'a) t4]
      ('a) t6
      ('a, 'b) t7 [='a t6]
      
    Logic Symbols
      function constr#t6 (_:int) (_:'a) : 'a t6
      function f (_:'a t6) : 'a t6
      function x (_:'a t6) : int
      function y (_:'a t6) : 'a
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    type t1
         
    
    type 'a t2 = t1
         
    
    (*@ function f_1 (x_1:t1): t1 =
        x_1:t1 *)
    
    type 'c t3 = t1
         
    
    (*@ function f_2 (x_2:t1): t1 =
        x_2:t1 *)
    
    type ('a, 'b) t4
         
    
    type 'a t5 = ('a, 'a) t4
         
    
    (*@ function f_3 (x_3:('a, 'a) t4): ('a, 'a) t4 =
        x_3:('a, 'a) t4 *)
    
    (*@ function f_4 (x_4:('a, 'a) t4): ('a, 'a) t4 =
        x_4:('a, 'a) t4 *)
    
    type 'a t6 = {x:int; y:'a}
              function constr#t6 (_:int) (_:'a) : 'a t6
              function x (_:'a t6) : int
              function y (_:'a t6) : 'a
         
    
    type ('a, 'b) t7 = 'a t6
         
    
    (*@ function f (x_5:'a t6): 'a t6 =
        match x_5:'a t6 with
        | constr#t6 x_6:int y_1:'a -> (constr#t6  x_6:int y_1:'a):'a t6
        end::'a t6
    *)


*** OK ***

