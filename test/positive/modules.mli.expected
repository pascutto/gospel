
*******************************
********** Parsed file ********
*******************************
module MA :
sig
  type ta =
    | C of int [@@gospel  function int_of_integer (x:integer): int ][@@gospel
                                                                     function integer_of_int (x:int): integer ]
  module MB :
  sig
    [@@@gospel
       function fb (x:integer) (y:integer): ta =
          C (int_of_integer (x + y))
     ]
    [@@@gospel  function int_of_float (x:float): int ]
    [@@@gospel  function float_of_int (x:int) : float ]
    module MC :
    sig
      type tc = {
        x: int ;
        y: float }[@@gospel  function fc (y: tc): ta = C y.x ][@@gospel
                                                                 function fcc (a: ta): tc = match a with
            C b -> {x=b;y=float_of_int b}]
    end
    module MD :
    sig
      [@@@gospel
         function td (a:ta) (b:MC.tc) : integer = match a with
        | C c -> (integer_of_int c) + (integer_of_int b.MC.x)
       ]
    end
  end
end
module ME = MA
module type MTF  =
  sig
    type ft
    val f : ft -> ft[@@gospel  function ff (x:ft): ft ][@@gospel
                                                          predicate fp1 (x:ft) ]
    [@@gospel  predicate fp2 (x:ft) ]
  end
module MF : MTF
val default : MF.ft -> MF.ft[@@gospel
                               x = default y
    requires MF.fp1 y
    ensures MF.fp2 x
 ]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

module MA :
sig
  type ta =
  | C of int 
    (*@ function int_of_integer ... *)(*@ function integer_of_int ... *)
  module MB :
  sig
    (*@ function fb ... *)(*@ function int_of_float ... *)
    (*@ function float_of_int ... *)
    module MC :
    sig
      type tc = {
      x: int ;
      y: float }
        (*@ function fc ... *)(*@ function fcc ... *)
    endmodule MD : sig (*@ function td ... *) end
  end
end

module ME = MA

module type MTF  =
  sig
    type ft
      val f : ft -> ft
    (*@ function ff ... *)(*@ predicate fp1 ... *)(*@ predicate fp2 ... *)
  end

module MF : MTF

val default : MF.ft -> MF.ft
(*@ x = default y
    requires ...
    ensures ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module modules.mli

  Namespace: modules.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: MA
        Type symbols
           ta
          
        Logic Symbols
          function C (_:int) : ta
          function int_of_integer (_:integer) : int
          function integer_of_int (_:int) : integer
          
        Exception Symbols
          
        Namespaces
          Namespace: MB
            Type symbols
              
            Logic Symbols
              function fb (_:integer) (_:integer) : ta
              function float_of_int (_:int) : float
              function int_of_float (_:float) : int
              
            Exception Symbols
              
            Namespaces
              Namespace: MC
                Type symbols
                   tc
                  
                Logic Symbols
                  function constr#tc (_:int) (_:float) : tc
                  function fc (_:tc) : ta
                  function fcc (_:ta) : tc
                  function x (_:tc) : int
                  function y (_:tc) : float
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: MD
                Type symbols
                  
                Logic Symbols
                  function td (_:ta) (_:tc) : integer
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              
            Type Namespaces
              
          
        Type Namespaces
          
      Namespace: ME
        Type symbols
           ta
          
        Logic Symbols
          function C (_:int) : ta
          function int_of_integer (_:integer) : int
          function integer_of_int (_:int) : integer
          
        Exception Symbols
          
        Namespaces
          Namespace: MB
            Type symbols
              
            Logic Symbols
              function fb (_:integer) (_:integer) : ta
              function float_of_int (_:int) : float
              function int_of_float (_:float) : int
              
            Exception Symbols
              
            Namespaces
              Namespace: MC
                Type symbols
                   tc
                  
                Logic Symbols
                  function constr#tc (_:int) (_:float) : tc
                  function fc (_:tc) : ta
                  function fcc (_:ta) : tc
                  function x (_:tc) : int
                  function y (_:tc) : float
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              Namespace: MD
                Type symbols
                  
                Logic Symbols
                  function td (_:ta) (_:tc) : integer
                  
                Exception Symbols
                  
                Namespaces
                  
                Type Namespaces
                  
              
            Type Namespaces
              
          
        Type Namespaces
          
      Namespace: MF
        Type symbols
           ft
          
        Logic Symbols
          function ff (_:ft) : ft
          predicate fp1 (_:ft)
          predicate fp2 (_:ft)
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      Namespace: MTF
        Type symbols
           ft
          
        Logic Symbols
          function ff (_:ft) : ft
          predicate fp1 (_:ft)
          predicate fp2 (_:ft)
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
  Signatures
    (*@ open Gospelstdlib *)
    
    module MA :
    sig
      type ta = C of int
                function C (_:int) : ta
           
      (*@ function int_of_integer (x_1:integer): int *)
      (*@ function integer_of_int (x_2:int): integer *)
      module MB :
      sig
        (*@ function fb (x_3:integer) (y_1:integer): ta =
            (C  (int_of_integer  (x_3:integer + y_1:integer):integer):int):ta
        *)
        (*@ function int_of_float (x_4:float): int *)
        (*@ function float_of_int (x_5:int): float *)
        module MC :
        sig
          type tc = {x:int; y:float}
                 function constr#tc (_:int) (_:float) : tc
                 function x (_:tc) : int
                 function y (_:tc) : float
               
          (*@ function fc (y_2:tc): ta =
              (C  (x  y_2:tc):int):ta *)
          (*@ function fcc (a:ta): tc =
              match a:ta with
              | C b:int -> (constr#tc  b:int (float_of_int  b:int):float):tc
              end::tc
          *)
        end
        module MD :
        sig
          (*@ function td (a_1:ta) (b_1:tc): integer =
              match a_1:ta with
              | C c:int -> ((integer_of_int 
                           c:int):integer + (integer_of_int 
                           (x  b_1:tc):int):integer):integer
              end::integer
          *)
        end
      end
    end
    
    module ME = MA
    
    module type MTF  =
      sig
        type ft
             
        val f : ft -> ft
        
        (*@ function ff (x_6:ft): ft *)
        (*@ predicate fp1 (x_7:ft) *)
        (*@ predicate fp2 (x_8:ft) *)
      end
    
    module MF : MTF
    
    val default : MF.ft -> MF.ft
    (*@ x_9:ft = default y_3:ft
        requires (fp1  y_3:ft):prop
        ensures (fp2  x_9:ft):prop*)


*** OK ***

